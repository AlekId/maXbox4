unit uPSI_TMSLCLRaspiHW;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 

 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_TMSLCLRaspiHW = class(TPSPlugin)
  public
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TTMSLCLRaspiSPI(CL: TPSPascalCompiler);
procedure SIRegister_TTMSLCLRaspiI2C(CL: TPSPascalCompiler);
procedure SIRegister_TMSLCLRaspiHW(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TTMSLCLRaspiSPI(CL: TPSRuntimeClassImporter);
procedure RIRegister_TTMSLCLRaspiI2C(CL: TPSRuntimeClassImporter);
procedure RIRegister_TMSLCLRaspiHW(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
   baseunix
  ,TMSLCLRaspiHW
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_TMSLCLRaspiHW]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TTMSLCLRaspiSPI(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TTMSLCLRaspiSPI') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TTMSLCLRaspiSPI') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function Open : boolean');
    RegisterMethod('Function Close : boolean');
    RegisterMethod('Function Connected : boolean');
    RegisterMethod('Function Transfer( cmd : byte) : boolean');
    RegisterMethod('Function ReadTransfer( buf : pointer; wsize, rsize : integer) : boolean');
    RegisterMethod('Function WriteTransfer( buf : pointer; wsize : integer) : boolean');
    RegisterMethod('Function SetByteRegister( RegNo : Integer; Val : Byte) : Integer');
    RegisterMethod('Function GetByteRegister( RegNo : Integer) : byte');
    RegisterMethod('Function Command( cmd : byte) : boolean');
    RegisterProperty('PortNum', 'TSPIPortNum', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TTMSLCLRaspiI2C(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TComponent', 'TTMSLCLRaspiI2C') do
  with CL.AddClassN(CL.FindClass('TComponent'),'TTMSLCLRaspiI2C') do
  begin
    RegisterMethod('Constructor Create( AOwner : TComponent)');
    RegisterMethod('Function Open : boolean');
    RegisterMethod('Function Close : boolean');
    RegisterMethod('Function Connected : boolean');
    RegisterMethod('Function SetByteRegister( RegNo : Integer; Val : Byte) : Integer');
    RegisterMethod('Function GetByteRegister( RegNo : Integer) : byte');
    RegisterProperty('I2CAddress', 'integer', iptrw);
    RegisterProperty('I2CPort', 'CInt', iptrw);
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_TMSLCLRaspiHW(CL: TPSPascalCompiler);
begin
  CL.AddTypeS('TArrowDirection', '( aUp, aDown, aLeft, aRight )');
  CL.AddTypeS('spi_ioc_transfer_t', 'record tx_buf_ptr : qword; rx_buf_ptr : qw'
   +'ord; len : longword; speed_hz : longword; delay_usecs : word; bits_per_wor'
   +'d : byte; cs_change : byte; pad : longword; end');
  SIRegister_TTMSLCLRaspiI2C(CL);
  CL.AddTypeS('TSPIPortNum', '( spi0, spi1 )');
  SIRegister_TTMSLCLRaspiSPI(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure TTMSLCLRaspiSPIPortNum_W(Self: TTMSLCLRaspiSPI; const T: TSPIPortNum);
begin Self.PortNum := T; end;

(*----------------------------------------------------------------------------*)
procedure TTMSLCLRaspiSPIPortNum_R(Self: TTMSLCLRaspiSPI; var T: TSPIPortNum);
begin T := Self.PortNum; end;

(*----------------------------------------------------------------------------*)
procedure TTMSLCLRaspiI2CI2CPort_W(Self: TTMSLCLRaspiI2C; const T: CInt);
begin Self.I2CPort := T; end;

(*----------------------------------------------------------------------------*)
procedure TTMSLCLRaspiI2CI2CPort_R(Self: TTMSLCLRaspiI2C; var T: CInt);
begin T := Self.I2CPort; end;

(*----------------------------------------------------------------------------*)
procedure TTMSLCLRaspiI2CI2CAddress_W(Self: TTMSLCLRaspiI2C; const T: integer);
begin Self.I2CAddress := T; end;

(*----------------------------------------------------------------------------*)
procedure TTMSLCLRaspiI2CI2CAddress_R(Self: TTMSLCLRaspiI2C; var T: integer);
begin T := Self.I2CAddress; end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TTMSLCLRaspiSPI(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TTMSLCLRaspiSPI) do
  begin
    RegisterConstructor(@TTMSLCLRaspiSPI.Create, 'Create');
    RegisterVirtualMethod(@TTMSLCLRaspiSPI.Open, 'Open');
    RegisterVirtualMethod(@TTMSLCLRaspiSPI.Close, 'Close');
    RegisterMethod(@TTMSLCLRaspiSPI.Connected, 'Connected');
    RegisterMethod(@TTMSLCLRaspiSPI.Transfer, 'Transfer');
    RegisterMethod(@TTMSLCLRaspiSPI.ReadTransfer, 'ReadTransfer');
    RegisterMethod(@TTMSLCLRaspiSPI.WriteTransfer, 'WriteTransfer');
    RegisterMethod(@TTMSLCLRaspiSPI.SetByteRegister, 'SetByteRegister');
    RegisterMethod(@TTMSLCLRaspiSPI.GetByteRegister, 'GetByteRegister');
    RegisterMethod(@TTMSLCLRaspiSPI.Command, 'Command');
    RegisterPropertyHelper(@TTMSLCLRaspiSPIPortNum_R,@TTMSLCLRaspiSPIPortNum_W,'PortNum');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TTMSLCLRaspiI2C(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TTMSLCLRaspiI2C) do
  begin
    RegisterConstructor(@TTMSLCLRaspiI2C.Create, 'Create');
    RegisterVirtualMethod(@TTMSLCLRaspiI2C.Open, 'Open');
    RegisterVirtualMethod(@TTMSLCLRaspiI2C.Close, 'Close');
    RegisterMethod(@TTMSLCLRaspiI2C.Connected, 'Connected');
    RegisterMethod(@TTMSLCLRaspiI2C.SetByteRegister, 'SetByteRegister');
    RegisterMethod(@TTMSLCLRaspiI2C.GetByteRegister, 'GetByteRegister');
    RegisterPropertyHelper(@TTMSLCLRaspiI2CI2CAddress_R,@TTMSLCLRaspiI2CI2CAddress_W,'I2CAddress');
    RegisterPropertyHelper(@TTMSLCLRaspiI2CI2CPort_R,@TTMSLCLRaspiI2CI2CPort_W,'I2CPort');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_TMSLCLRaspiHW(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TTMSLCLRaspiI2C(CL);
  RIRegister_TTMSLCLRaspiSPI(CL);
end;

 
 
{ TPSImport_TMSLCLRaspiHW }
(*----------------------------------------------------------------------------*)
procedure TPSImport_TMSLCLRaspiHW.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_TMSLCLRaspiHW(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_TMSLCLRaspiHW.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_TMSLCLRaspiHW(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.

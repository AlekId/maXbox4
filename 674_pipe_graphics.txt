{***************************************************************
 *            Uptime_4  replace digit - regex task & graphic routines
 * Project  : education system bITbox
 * Unit Name: 672_regex_ask_task.txt
 * Purpose  : Demonstrates a RegEx and/or a function doing the same task!
 * Date     : 18/10/2012  -  14:38:5 
 *          #sign:Max: MAXBOX10: 18/05/2016 13:11:37 
 *          : 11/11/2015  - better process on/off  #locs:264
 ****************************************************************}
//compilerswitch $N- turns the coprocessor off, {$mode objfpc}{$H+} loc's =1

PROGRAM Uptime_BooleanLAB_RegExTask_PIPE_GRAPH;

//function IsDebuggerPresent: Boolean; external 'KERNEL32.DLL';


var ApplicationEvents1: TApplicationEvents; 
   NamedPipe: TNamedPipe2;
   memoServer: TMemo;
   NamedPipeClass : TNamedPipeServer;

const
  cFmtText = '%.2x';
  cBase = 16;
  cDigitCount = 2;


function GetSystemDirectory2(var S: String): Boolean;
var Len: Integer;
begin
  Len:= {Windows.}GetSystemDirectory('Nil', 0);
  if Len > 0 then begin
    SetLength(S, Len);
    //writeln(itoa(len))
    Len:= {Windows.}GetSystemDirectory(PChar(S), Len);
    SetLength(S, Len);
    //writeln(itoa(len))
    Result:= Len > 0;
  end else
    Result:= False;
end;

function GetNumbers(const Value: string): string;
var
  ch: char;
  Index, Count: integer;
begin
  SetLength(Result, Length(Value));
  Count := 0;      
  for Index := 1 to length(Value) do begin
    ch := Value[Index];
    if (ch >= '0') and (ch <='9') then  begin
      inc(Count);
      Result[Count]:= ch;
    end;
  end;
  SetLength(Result, Count);
end;

function CompareBrushes(ABrush1, ABrush2: TBrush): Boolean;
begin
  Result :=
    (ABrush1.Color = ABrush2.Color) and
    (ABrush1.Style = ABrush2.Style);
end;

function CompareFonts(AFont1, AFont2: TFont): Boolean;
begin
  Result :=
    (AFont1.Charset = AFont2.Charset) and
    (AFont1.Color = AFont2.Color) and
    (AFont1.Name = AFont2.Name) and
    (AFont1.Pitch = AFont2.Pitch) and
    (AFont1.Size = AFont2.Size) and
    (AFont1.Style = AFont2.Style);
end;

procedure CopyBitmap(DestDC: HDC; DestRect: TRect; SrcDC: HDC; SrcX, SrcY: Integer);
begin
  {$IFDEF USE_WINAPI}Windows.{$ENDIF}BitBlt(DestDC,
    DestRect.Left, DestRect.Top, DestRect.Right - DestRect.Left, DestRect.Bottom - DestRect.Top,
    SrcDC, 0, 0, SRCCOPY);
end;

function CreateEmptyPoint: TPoint;
begin
  Result := Point(0,0);
end;

function CreateEmptyRect: TRect;
begin
  Result := Rect(0,0,0,0);
end;

function CreateEmptyRgn: HRGN;
begin
  Result := CreateRectRgn(0,0,0,0);
end;

{ Declares RGB + Alpha channel color description allowing both to
    access single channels and the whole color item. }
{type   TKColorRec = record
    //case Integer of
      //0: (R, G, B, A: Byte);
      R, G, B, A: Byte;
      Value: Cardinal;
  end;  }

function ColorRecToColor(Color: TKColorRec): TColor;
begin
  Result := Color.Value and $FFFFFF;
end;

function ColorToColorRec(Color: TColor): TKColorRec;
begin
  Result.Value := ColorToRGB(Color);
end;


function ColorToGrayScale(Color: TColor): TColor;
var
  GreyValue: Integer;
  X: TKColorRec;
begin
  X := ColorToColorRec(Color);
  GreyValue := (Integer(21) * X.R + Integer(72) * X.G + Integer(7) * X.B) div 100;
  X.R := GreyValue;
  X.G := GreyValue;
  X.B := GreyValue;
  Result := X.Value;
end;

procedure DrawOpacityBrush(ACanvasBitmap: TBitmap; X, Y: Integer;
  AColor: TColor; ASize: Integer; Opacity: Integer);
var
  Bmp: TBitmap;
begin
  Bmp := TBitmap.Create;
  try
    Bmp.SetSize(ASize, ASize);
    Bmp.Transparent := False;

    with Bmp.Canvas do
    begin
      Pen.Color := AColor;
      Pen.Style := psSolid;
      Pen.Width := ASize;
      MoveTo(ASize div 2, ASize div 2);
      LineTo(ASize div 2, ASize div 2);
    end;
    //ACanvasBitmap.Canvas.Draw(X, Y, Bmp, Opacity);
 
    ACanvasBitmap.Canvas.Draw(X, Y, Bmp);
  finally
    Bmp.Free;
  end;
end;

Const TRANSPARENT = 1;
Const OPAQUE = 2;

procedure DrawFilledRectangle(Canvas: TCanvas; const ARect: TRect; BackColor: TColor);
var
  DC: HDC;
begin
  DC := Canvas.Handle;
  if BackColor <> clNone then
  begin
    SetBkMode(DC, OPAQUE);
    SetBkColor(DC, ColorToRGB(BackColor));
  end;
  FillRect(DC, ARect, Canvas.Brush.Handle);
end;



procedure TfrmNamedPipeBase_btnConnectClick(Sender: TObject);
var namedpipe1: Tnamedpipe;

begin

  if not Assigned(NamedPipe) then
    begin
      NamedPipe := TNamedPipe2.Create('lePipeName.Text',
        'leServer.Text');
    end;
  if NamedPipe.Open('','') then begin
      {btnSendMessage.Default := True;
      btnSendMessage.Enabled := True;
      btnConnect.Default := False;
      btnConnect.Enabled := False; }
      namedpipe1:= namedpipe as TNamedpipe;
      TNamedPipeThread.Create((NamedPipe), memoServer); 
    end else
    begin
      ShowMessage('Unable to connect to server! Activate server first!');
    end;
   // namedpipe1:= namedpipe as TNamedpipe;
   // TNamedPipeThread.Create(NamedPipe1, memoServer); 
    //TNamedPipeThread.Create(TNamedpipe(NamedPipe), memoServer); 

end;

procedure TfrmNamedPipeBase_btnSendMessageClick(Sender: TObject);
begin
  if Assigned(NamedPipe) then
    begin
      NamedPipe.Write('leMessage.Text');
      //leMessage.Text := '';
    end else
    begin
      ShowMessage('Named Pipe not opened');
    end;
end;

 procedure testMap;
 var BM : TBitmap;
     TmpRect: TRect; //TmpRect: Tpoint;
      Arect: TRect;
      ACanvas, TmpCanvas: TCanvas;
 begin
  BM := TBitmap.Create;
    BM.Width := ARect.Right - ARect.Left;
    BM.Height := ARect.Bottom - ARect.Top;
    BM.Canvas.Brush.Assign(ACanvas.Brush);
    TmpRect := Rect(0, 0, BM.Width, BM.Height);
    BM.Canvas.FillRect(TmpRect);
    TmpCanvas := BM.Canvas;
 end;

  //main form list call  
 Begin
    //calls some test functions
    printF('this is %.18f ',[maxCalc('ln(2)^e')]);
    printF('this is %.18f ',[maxCalc('log(2)')]);
  
    printF('this is %.18f ',[maxCalc('sqr(cos(ln(2)^e))')]);
    printF('this is %.4f ',[maxCalc('sqrt(e^(ln(2)))')]);
    printF('this is Area of r=1  %.18f ',[maxCalc('PI*(1^2)')]);
    printF('this is Area of d=2r %.18f ',[maxCalc('PI/4*(2^2)')]);
    writeln(getVersionString(exepath+'maxbox4.exe'));
    sr:= loadFileAsString(exepath+'maxbox_functions_all.pdf');
    writeln('file compare J: '+inttoStr(CompText(sr, sr)));
    writeln('file lenght size: '+intToStr(length(sr)));
    writeln('getSystemDir: '+botostr(getSystemDirectory2(sr)))   
      writeln(sr)
      writeln('UpTime: '+UpTime)
      writeln(B2X(255)) 
      
    {  I was developing a program that validate a CPF, a type of document of my country. I already did all the math. But in the input Edit1, the user will insert like:
       123.456.789-00
I have to get only the numbers, without the hyphen and the dots, to my calcs worth. }

    sr := '123.456.789-00$p'
    writeln(ReplaceRegExpr('\D',sr,'',true))
    
    //\D is a non-digit, and \W is a non-word character, both should work)
    Writeln(GetNumbers('123.456.789-00$p'));
    TfrmNamedPipeBase_btnConnectClick(self)
    
  MessageBox(0,PChar('CPU speed is '+CPUSpd+' MHz'),'CPU Speed Check',MB_IconInformation+MB_OK);

                
End.

  lambda: a+b --> a.+(b)

  type
    TCaptionTextControl = class(TControl);
    TCaptionTextControl(Controls[i]).Caption := 'Whatever you Want';


Proposal for Abreviation Symbol:

  01 FALSE    //Contradiction

  02 AND      //Conjunction x*y

  03 INHIB    //Inhibition x*^y

  04 PRAEP    //Praependence x

  05 PRAE     //Praesection ^x*y

  06 POST     //Postpendence y

  07 XOR      //Exclusive OR x*^y+^x*y

  08 OR       //Disjunction OR = x+y

  09 NOR      //Rejection

  10 AEQ      //Aequivalence x<-->y, ^x*^y+x*y

  11 NEGY     //YNegation ^y

  12 IMPY     //YImplication y-->x; x+^y

  13 NEGX     //Xnegation ^x

  14 IMPX     //XImplication x-->y; ^x+y

  15 NAND     //Exclusion

  16 TRUE     //TRUE Tautologic
  

 //ShellExecute in W64
//ExecuteCommand('cmd','/k FC /L/N C:\maxbook\maxbox3\maxbox391.exe C:\maxbook\maxbox3\maxbox3.exe')
 //  ExecuteCommand('cmd','/k FC /L /N C:\maxbook\maxbox3\maxboxdef1.ini C:\maxbook\maxbox3\maxboxdef2.ini')
   

getRulesbyContract  

  couple of slides i have but you got the point
  one important things that i want to stress
  difference between data and delta is the difference
  units to add :
  
unit SqlExpr;  // is just there integrate?
unit DBXCommon;
unit DBXPlatform;
unit DBConnAdmin;
unit IdVCard;  //check strtofloat
unit IdTimeServer;
unit IdTimeUDPServer;
unit IdTimeUDP;
unit TIdUDPServer
unit IdIPWatch;
unit IdMessageCollection;
unit IdRexec;  //sort of remote execution
unit IdRexecServer;
unit IdRemoteCMDServer,
unit IdRemoteCMDClient;

unit uwinplot;   from dmat085
   File name:        cUtils.pas unit cUtils;

:: ***********************************************
:: Compilation of DMath library for Delphi/Windows
:: ***********************************************

dcc32 dmath.dpr -$O+ -U..\units -DDELPHI 
dcc32 dmath.pas -$O+ -I..\units -DDELPHI                                              }

 add in menu by help dmath.pdf
 navigator look at dependency viewer at the right site : skip list

  with CL.AddClassN(CL.FindClass('TCustomListView'),'TListView') do begin
  RegisterPublishedProperties;
constructor is missing! to define in down class

ListView1.Visible is missing     --->uPSI_ComCtrls.pas 
ListView1.AddItem is missing
more properties in downclass

  Col.Width := 140; is missing //tcolumn  check 230_DataSetXMLBackupScholz2.txt
             SQLQuery1['fullname']; is there a default propertie?
                   
 www.jensendatasystems.com/ekon16cds.zip

check TSession.Free
  writeln(createclassid);  from comobj unit

check  with ListView1 do begin  tlistview constructor of columns.add ?
   
check all resources of add ons:
- mp3 player ->ok
- cipher file -> Tstringlist
- memory game -> ok
- 4 gewinnt ->ok
- picture game -tbitmap, tbitmapimage  (if new picture or to picture)
- maxplorer ->ok  (if drag n drop a tList is not freed)
- cryptobox -> TStringlist

Scan-Report of: maxbox3.zip
Ahnlab	-
AntiVir	OK
Avast	OK
AVG	OK
BitDefender	OK
CA-AV	OK
Command	OK
Command (Online)	OK
Eset Nod32	OK
Fortinet	OK
F-Prot	OK
G Data	OK
Ikarus	OK
K7 Computing	OK
Kaspersky	OK
Kaspersky (Online)	OK
McAfee	OK
McAfee (BETA)	OK
McAfee (Online)	OK
McAfee GW Edition (Online)	OK
Microsoft	OK
Norman	OK
Panda	OK
Panda (Online)	OK
QuickHeal	Suspicious (warning)
Rising	OK
Sophos	OK
Sophos (Online)	OK
Sunbelt	OK
Symantec	OK
Symantec (BETA)	OK
Trend Micro	OK
Trend Micro (Cons.)	OK
Trend Micro (CPR)	OK
VBA32	OK
VirusBuster	OK  
This unit provides a powerfull hexadecimal editor component @link(TKHexEditor)
  with following major features:
  <UL>
  <LI><I>advanced editing capabilities</I></LI>
  <LI><I>advanced rendering styles</I></LI>
  <LI><I>clipboard operations</I></LI>
  <LI><I>virtually unlimited undo/redo operations</I></LI>
  <LI><I>key mapping functionality</I></LI>
  <LI><I>fast search/replace function</I></LI>
  <LI><I>print/preview function</I></LI>
  </UL>
object frmNamedPipeBase: TfrmNamedPipeBase
  Left = 8
  Top = 8
  Width = 525
  Height = 296
  Caption = 'Named Pipe Server'
  Color = clBtnFace
  Font.Charset = DEFAULT_CHARSET
  Font.Color = clWindowText
  Font.Height = -11
  Font.Name = 'MS Sans Serif'
  Font.Style = []
  OldCreateOrder = False
  PixelsPerInch = 96
  TextHeight = 13
  object GroupBox1: TGroupBox
    Left = 0
    Top = 0
    Width = 517
    Height = 147
    Align = alTop
    Anchors = [akLeft, akTop, akRight, akBottom]
    Caption = 'Named Pipe Details'
    TabOrder = 0
    DesignSize = (
      517
      147)
    object leServer: TLabeledEdit
      Left = 12
      Top = 28
      Width = 121
      Height = 21
      EditLabel.Width = 31
      EditLabel.Height = 13
      EditLabel.Caption = 'Server'
      TabOrder = 0
      Text = '.'
    end
    object lePipeName: TLabeledEdit
      Left = 146
      Top = 26
      Width = 121
      Height = 21
      EditLabel.Width = 52
      EditLabel.Height = 13
      EditLabel.Caption = 'Pipe Name'
      TabOrder = 1
      Text = 'NamedPipeDemo'
    end
    object btnConnect: TButton
      Left = 432
      Top = 28
      Width = 75
      Height = 25
      Caption = 'Connect'
      Default = True
      TabOrder = 2
      OnClick = btnConnectClick
    end
    object leMessage: TLabeledEdit
      Left = 4
      Top = 120
      Width = 511
      Height = 21
      Anchors = [akLeft, akTop, akRight, akBottom]
      EditLabel.Width = 43
      EditLabel.Height = 13
      EditLabel.Caption = 'Message'
      TabOrder = 3
    end
    object btnSendMessage: TButton
      Left = 328
      Top = 28
      Width = 75
      Height = 25
      Caption = 'Send'
      Enabled = False
      TabOrder = 4
      OnClick = btnSendMessageClick
    end
    object LabeledEdit1: TLabeledEdit
      Left = 12
      Top = 72
      Width = 121
      Height = 21
      EditLabel.Width = 71
      EditLabel.Height = 13
      EditLabel.Caption = 'NT User Name'
      TabOrder = 5
    end
    object LabeledEdit2: TLabeledEdit
      Left = 146
      Top = 72
      Width = 121
      Height = 21
      EditLabel.Width = 89
      EditLabel.Height = 13
      EditLabel.Caption = 'NT User Password'
      PasswordChar = '*'
      TabOrder = 6
    end
  end
  object memoServer: TMemo
    Left = 0
    Top = 147
    Width = 517
    Height = 122
    Align = alClient
    Anchors = [akLeft, akTop, akRight]
    TabOrder = 1
  end
end

trojan test:
https://www.virustotal.com/en/file/e9d30441338d724ce58d804872147261beb9f0bc8ad590afb1df114a1d9c8b85/analysis/1460150537/

no trojan
https://www.virustotal.com/en/file/584ca53d6dd8f7de17d0a1959bf78aad04697cf0ad7b3f23aee90b5ff720ede1/analysis/1460194451/